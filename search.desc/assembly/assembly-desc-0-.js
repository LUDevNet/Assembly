searchState.loadedDescShard("assembly", 0, "This crate is a collection of parsers and data types To â€¦\nThe zone/world (<code>*.luz</code>) file format\nThe level (<code>*.lvl</code>) file format\nThe pack (<code>*.pk</code>) files\nThe pack index (<code>*.pki</code>) files\nThe segmented (<code>*.sd0</code>) compression format\nData definitions for zone files\nReading of zone files\nParser functions for zone file data\nModule for reading the path data in a zone file\nVersion of the zone file\nA type that can represent path data\nReference to a scene file\nTransitions between scenes\nTransition Points\nScene Transition at a single point\nThe data in a luz file\nName of the scene file\nRevision of this file\nVersion of this file\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the scene\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n0: default, 1: audio\nInternal description of the map\nRelative filename of the map\nInternal name of the map\nName of the scene\nName of the transition\nPath data\nPosition of the transition\nPoints of the transition\nID of the scene\nList of scenes\nList of transitions\nUnknown\nSpawining placement of the player\nID of the world described\nFailed to open the file\nMissing bytes\nError when loading a LUZ file\nFailed to parse (recoverable)\nFailed to parse (fatal)\nFailed to read from the file\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nData type definitions for zone path data\nParsing functions for path data\nA sequence of points\nEnum of all path variants\nInterpretation of this path\nGeneral data for camera path\nGeneral data for a movement path\nGeneral data for a moving platform path\nGeneral data for a property (border) path\nGeneral data for a race path\nGeneral data for a rail path\nGeneral data for a showcase path\nGeneral data for a spawner path\nCommon header for all paths\nType of this path\nWrapper for all general path data\nVersion of this path data\nData for a camera path waypoint\nData for a movement path waypoint\nData for a moving platform path waypoint\nSounds for a moving platform\nData for a property (border) path waypoint\nData for a race path waypoint\nData for a rail path waypoint\nData for a showcase path waypoint\nData for a spawner network waypoint\nPath Waypoint\nA collection of single points\nA closed polygon\nAchievement required to rent a property\nTime units for rental time\nConfig for a waypoint\nAll paths in a zone\nVersion / first field of path data\nRequired achievement\nActivate network on load\nWorld that this property is attached to\nLimit to the number of clones in one instance\nDisplay description\nDisplay name of the property\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTurn a u32 into a value\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum building height\nmax to spawn (MAX_VALUE for infinity)\nnumber to maintain spawned\nFollowing path\nCoordinate of the player\nRental price\nRental time\nUnit for rental time\nMultiplier for reputation\nTime until respawn\nThe object to be spawned\nSpawner object ID without flags\nUnknown value\nUnknown\nUnknown value\nUnknown value\nTravel sound?\nUnknown field\nGeneral structs and data\nParsers for the data\nLow level reading\nA chunk (header + data)\nThe header for a single chunk\nThe version of a chunk\nThe file meta chunk\nThe chunk containing the offsets of the other chunks\nThe pointer to the chunk #2000\nThe pointer to the chunk #2001\nThe pointer to the chunk #2002\nThe chunk data\nThe version of the chunk data format\nThe chunk data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe chunk header\nThe version of the chunk header format\nThe chunk header\nThe ID of this chunk\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe chunk data offset\nThe revision of this file\nThe chunk size\nThe version of this chunk\nThe version of this file\nA low level reader class\nReturns the argument unchanged.\nSeek meta\nLoad a chunk header\nGet the meta chunk\nGet the chunk meta data\nCalls <code>U::from(self)</code>.\nSeek to the chunk data\nThe structures as the appear in the file\nInteract with PK files in the file system\nParsing functions\nLow level reader for PK files\nWrite PK files\nMagic bytes after files in a PK file\nMagic bytes at the start of a PK file\nAn entry for a single file\nPayload of the <code>PKEntry</code>\nThe header of a pack file#\nThe [CRC][<code>crate::crc</code>] value of this file\nThe data in this node\nOffset of the file data within the PK archive\nThe base addr of the file list\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTODO: figure out\nBinary tree node to the left\nFile Metadata\nNumber of compressed files in this archive\nBinary tree node to the right\nHandle to a PK file\nInversion of control to put bytes into PK\nFinish the file by writing the directory\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOpen a PK file\nPut a file into the PK\nWrite the bytes into the file\nParse a file list entry\nParse a file list entry\nParse the file list\nParse the magic bytes\nParse the trailer\nThe stream <em>is</em> sd0 compressed\nA stream that is either compressed or plain\nA low level random access to the entries\nA low level pack file reader\nA low level read for a file\nFailure when parsing\nThe stream is <em>not</em> sd0 compressed\nCheck for the magic bytes at the beginning of the file\nFind an entry given a CRC\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the number of entries\nLoad the header from the end of the file\nGet the specified entry if inside of count\nGet an random access wrapper for the entries\nGet a list of all entries\nGet some object with a read trait representing the data\nGet a boxed reader for the file stream\nLoad the header from the end of the file\nGet a mutable reference to the inner reader\nGet a mutable reference to the underlying file\nGet a reference to the inner reader\nGet a reference to the underlying file\nGet the root entrys if not empty\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the inner reader\nReturn the contained PackFile\nOpen a file from a stream\nGet all the entries\nImplements a visitor pattern\nWrite the full directory to disk\nWrite the directory of a PK file.\nWrite the trailer of a PK file\nPublic data structures for pack index files\nGenerating PKI files\nLogic to read a PKI file from a byte stream\nParsers for parts of the file\nCode to write out a PKI file\nThe data associated with each file\nThe data for a single pack file\nThe entire data in a PKI file\nHandle to a specific pack file\nadd one file to this pack file\nadd more files to this pack file\nAdd a new pack to this PKI\nThe list of PK archive paths\nThe category of this file. The least significant byte â€¦\nThe map from CRC to file metadata\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad the PKI from a BufRead implementation\nLoad the PKI from a file\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe index of the pack file in <code>PackIndexFile::archives</code>\nThe path to the pack file relative to the installation\nWhether to include or exclude the specific files\nKind of an argument\nConfig for creating a pack file\nThe name represents a directory\nExclude matching files\nThe name represents a file\nInclude matching files\nArgument to a pack file\nConfig for a single pack file\nwhat files to include\nWhether to compress files\nThe directory to pull from\nInclude or Exclude\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe kind of the argument\nThe manifest file (e.g. trunk.txt)\nname of the file\nThe name\nThe file to output the PKI to\nThe list of pack files\nPrefix\nRun the given config\nA filter for the specific file name\nWhether to recurse into subdirectories\nFailed to open the file\nEOF while parsing\nFailed to load a PKI file\nFile did not match parser\nValid file but invalid data\nFailed to read from the file\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParse a complete PKI file from an in-memory buffer\nWrite out a PKI file\nWhen compressing data, the compression level can be â€¦\nThe magic bytes for the sd0 format\nOptimize for the size of data being encoded.\nDecode a byte slice into a vector\nEncode a byte slice into a vector\nOptimize for the best speed of encoding.\nReturns the argument unchanged.\nCompression for use in a script\nSegmented Index Files (si0)\nCalls <code>U::from(self)</code>.\nReturns an integer representing the compression level, â€¦\nCreates a new description of the compression level with an â€¦\nNo compression is to be performed, this may actually â€¦\nstd::io::Read adapters for <code>*.sd0</code> reading\nstd::io::Write adapters for <code>*.sd0</code> writing\nWhen compressing data, the compression level can be â€¦\nSD0 Converter\nConvert a file to sd0\nReturns the argument unchanged.\nWhether to generate â€˜si0â€™ files\nCalls <code>U::from(self)</code>.\nThe first line is a header of the following form:\nThe rest of the file is one line for every compressed â€¦\nAdler32 of the raw bytes modulo 0xFFFFFFFF, as hex, with â€¦\nMD5 hash of compressed bytes\nnumber of compressed bytes\nnumber of bytes already written to compressed file â€¦\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nthe file extension <code>si0</code> and magic bytes 0x01, 0xff as â€¦\nthe MD5 hash of the input\nMD5 hash of the raw bytes\nthe total size of the input\nthe segment size\nsize of the block\nstart of the block in the raw file\ncalled io::Read::read again after an error\nContains the error value\nError type for segmented streams\nAn IO Error occured\nThe magic bytes are wrong\nContains the success value\nResult with segmented error\nA <code>sd0</code> streamed file\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner stream\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the inner reader\nCreate a new reader\nRead from the (decompressed) stream\nWhen compressing data, the compression level can be â€¦\nContains the error value\nAn Error\nCalled finish on invalid\nI/O Error\nContains the success value\nA result\nA <code>sd0</code> encoder\nFinish the current block and return the inner writer\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new encoder")