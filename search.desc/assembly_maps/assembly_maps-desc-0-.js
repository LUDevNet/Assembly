searchState.loadedDescShard("assembly_maps", 0, "The zone/world (<code>*.luz</code>) file format\nThe level (<code>*.lvl</code>) file format\nThe terrain (<code>*.raw</code>) file format\nData definitions for zone files\nReading of zone files\nParser functions for zone file data\nModule for reading the path data in a zone file\nVersion of the zone file\nA type that can represent path data\nReference to a scene file\nTransitions between scenes\nTransition Points\nScene Transition at a single point\nThe data in a luz file\nName of the scene file\nRevision of this file\nVersion of this file\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the scene\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n0: default, 1: audio\nInternal description of the map\nRelative filename of the map\nInternal name of the map\nName of the scene\nName of the transition\nPath data\nPosition of the transition\nPoints of the transition\nID of the scene\nList of scenes\nList of transitions\nUnknown\nSpawining placement of the player\nID of the world described\nFailed to open the file\nMissing bytes\nError when loading a LUZ file\nFailed to parse (recoverable)\nFailed to parse (fatal)\nFailed to read from the file\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nData type definitions for zone path data\nParsing functions for path data\nA sequence of points\nEnum of all path variants\nInterpretation of this path\nGeneral data for camera path\nGeneral data for a movement path\nGeneral data for a moving platform path\nGeneral data for a property (border) path\nGeneral data for a race path\nGeneral data for a rail path\nGeneral data for a showcase path\nGeneral data for a spawner path\nCommon header for all paths\nType of this path\nWrapper for all general path data\nVersion of this path data\nData for a camera path waypoint\nData for a movement path waypoint\nData for a moving platform path waypoint\nSounds for a moving platform\nData for a property (border) path waypoint\nData for a race path waypoint\nData for a rail path waypoint\nData for a showcase path waypoint\nData for a spawner network waypoint\nPath Waypoint\nA collection of single points\nA closed polygon\nAchievement required to rent a property\nTime units for rental time\nConfig for a waypoint\nAll paths in a zone\nVersion / first field of path data\nRequired achievement\nActivate network on load\nWorld that this property is attached to\nLimit to the number of clones in one instance\nDisplay description\nDisplay name of the property\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTurn a u32 into a value\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum building height\nmax to spawn (MAX_VALUE for infinity)\nnumber to maintain spawned\nFollowing path\nCoordinate of the player\nRental price\nRental time\nUnit for rental time\nMultiplier for reputation\nTime until respawn\nThe object to be spawned\nSpawner object ID without flags\nUnknown value\nUnknown\nUnknown value\nUnknown value\nTravel sound?\nUnknown field\nGeneral structs and data\nParsers for the data\nLow level reading\nA chunk (header + data)\nThe header for a single chunk\nThe version of a chunk\nThe file meta chunk\nThe chunk containing the offsets of the other chunks\nThe pointer to the chunk #2000\nThe pointer to the chunk #2001\nThe pointer to the chunk #2002\nThe chunk data\nThe version of the chunk data format\nThe chunk data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe chunk header\nThe version of the chunk header format\nThe chunk header\nThe ID of this chunk\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe chunk data offset\nThe revision of this file\nThe chunk size\nThe version of this chunk\nThe version of this file\nA low level reader class\nReturns the argument unchanged.\nSeek meta\nLoad a chunk header\nGet the meta chunk\nGet the chunk meta data\nCalls <code>U::from(self)</code>.\nSeek to the chunk data\nGeneral structs and data\nParsers for the data\nthese 4 ints seem to stay mostly constant, but sometimes â€¦\nthis might sound silly, but is it y?\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n(or y in 2D)")