searchState.loadedDescShard("assembly_core", 0, "Common datastructures and methods\nUtilities for borrowing\nReading data directly from a buffer\nThe LEGO data format\nParser methods for the general types\nCommon error and result handling facilities\nRun the function <code>run</code> and print the how much time the …\nThe general types used all over the place\nA mutable reference to T\nAn enum that provides a mutable reference by either owning …\nAn owned reference to T\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdditional methods on byte slices\nErrors from casting a minimally-aligned type\nlittle-endian u64\nlittle-endian u16\nlittle-endian u32\nAsserts that the type has a minimal ABI alignment of <code>1</code>\nSome byte between start and end was outside of the given …\nSimilar to <code>From&lt;&amp;U&gt; for T</code>\nThe value that this struct encodes\nCast a buffer to a reference\nCast to T\nCast a buffer to a slice\nCast to slice of T\nextract the contained value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTry to cast a buffer to a reference\nTry to cast to T\nTry to cast a buffer to a slice\nTry to cast to T\nThe offset that failed\nA boolean (0 or 1)\nAn internal string\nA single precision floating point number\nA signed 32bit integer\nA table of LDF values\nError when parsing LDF\nA user-facing string\nAn unsigned 32bit interger\nA LEGO-Data-Format value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe contained map\nHelper method to dump some values\nParse an ObjectID\nParse an ObjectTemplate\nParse a Quaternion\nParse a Quaternion\nParse a string with u16 length specifier\nParse an u32 boolean\nParse a string after an u32 length specifier\nParse a u32 wstring\nParse an u8 boolean\nParse a string after an u8 length specifier\nParse a u8 wstring\nParse a Vector3f\nParse a WorldID\nCount Error {0:?}\n{0}\nContains the error value\nError when parsing a file\nResult when parsing a file\nIO Error {0:?}\nNom Incomplete\nNot Implemented\nContains the success value\nNom Error at {addr}+{offset}: {code:?}\nTrait to hand over a parse error past a buffer\nEncoding {0:?}\nCall this after a <code>&lt;IResult as Finish&gt;::finish</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAddress of the error\nThe nom error kind\nHow far the parser got beyond addr\nObject ID\nAlias for u32 for an object template id\nPosition and rotation in three dimensional space\nRotation in three dimensional space\nPosition in three dimensional space\nAlias for u32 that represents a world map from the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe serial ID of this object\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new Vector of floats given <code>x</code>, <code>y</code>, and <code>z</code>\nCreate a new Quaternion given <code>x</code>, <code>y</code>, <code>z</code>, and <code>w</code>\nCreate a new world ID from an u32\nCreate a new LOT from an object template\nCreate a new ObjectID with a scope and flags\nThe position\nThe rotation\nThe bitmask for the scope of this object\nThe W component\nThe X coordinate\nThe X component\nThe Y coordinate\nThe Y component\nThe Z coordinate\nThe Z component")