searchState.loadedDescShard("assembly_fdb", 0, "The database (<code>*.fdb</code>) file format used for the core …\nThis trait is implemented on all types that represent a …\nThe data structures for representing the file/database.\nThe structures, as they are serialized\nGet the hash value\nCode for use with <code>std::io::{Read, Write}</code>\nLow-Level API that is suitable for non-little-endian …\nQuery the database\nRead-Only low level access to a database file\nSQLite conversions and tooling\nArena-Store &amp; Writer\nTypes that are common to most FDB-APIs\nA 64 bit integer\nA 64 bit integer\nA 64 bit integer\nA boolean\nA boolean\nA boolean\nA container of rows with the same hash value\nName and default type for one field in each row\nType-Parameters to <code>Value</code>\nAn owned field value\nA 32 bit IEEE floating point number\nA 32 bit IEEE floating point number\nA 32-bit IEEE floating point number\nThe type that holds a <code>ValueType::BigInt</code>\nA 32 bit integer\nA 32 bit integer\nA 32-bit signed integer\nThe context for <code>mem::Field</code>\nThe NULL value\nThe NULL value\nThe NULL value\nThe <code>Value</code> context for <code>core::Field</code>\nA sequence of fields\nAn ordered map of tables\nThe type that holds a <code>ValueType::String</code>\nA list of buckets and thus collection of rows with a name\nAn array of buckets, and a collection of rows\nA list of columns with types and a name\nA string\nA string\nA long string\nA single field value in the database\nTrait for mapping value from one context to another\nValue datatypes used in the database\nA (XML?) string\nA (XML?) string\nAn (XML?) string\nThe type that holds a <code>ValueType::VarChar</code>\nReturns a reference to the slice of buckets\nThe buckets in this table\nReturns a mutable reference to the vector of buckets\nReturns a reference to the slice of columns\nThe columns of the table in the same order as in the rows\nReturns a mutable reference to the vector of columns\nThe type of the column\nGet a reference to the fields vector\nGet a mutable reference to the fields vector\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new table from a definition and data struct\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the buckets vector\nExtract the columns vector\nReturn the fields of this row\nImplementations of <code>IntoIterator</code> for the core model\nGeneral-Purpose file loader\nCalled when mapping an i64\nCalled when mapping a string\nCalled when mapping an XML value\nReturns the name of the table\nThe name of the column\nThe name of the table\nCreate a new, empty row\nCreate a new empty bucket\nCreates a new instance\nCreates a new table without data\nCreate a new empty schema\nGet the rows of the bucket\nGet a mutable reference to the rows from a reference to a …\nGet a reference to the rows from a reference to a bucket\nGet a reference to the table of that name it it exists\nReturns the number of tables\nGet a mutable reference to the table of that name it it …\nThe tables in this schema\nA static pointer to a function from <code>Bucket</code> to a row …\nA static pointer to a function from <code>Bucket</code> reference to a …\nAn iterator over a slice of fields in a row reference.\nAn iterator over a vector of fields in a row.\nAn iterator over a slice of rows in a bucket reference.\nAn iterator over a vector of rows in a bucket.\nAn iterator over a vector of buckets in a table.\nAn iterator over a slice of buckets in a table reference.\nA flattened iterator over all rows in a table, …\nA flattened iterator over all row references in a table, …\nConfiguration for the <code>SchemaLoader</code>\nConfiguration for SchemaLoader\nStructure to load a schema from some encapsulated stream\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether to process to table specified by <code>def</code>\nCreate a new loader from the given reader\nThe policy for tables\nTry to load a bucket\nTry to load a column\nTry to load a row\nTry to load a schema\nTry to load a table\nTry to load table data\nTry to load a table definition\nThe basic format of an array reference\nThe header of a single bucket.\nThe header of a column (field-of-row) definition\nThe type and value of a row field.\nThe header of the database file.\nThe header for a single row\nOne entry of the linked list of references to rows.\nThe header of a table data block\nThe header of a table definition\nThe header of a table.\nThe offset of the start of the array\nReturns the expected byte length of the <code>FDBBucketHeader</code> …\nThe buckets.\nThe number of columns in this table.\nThe numeric identifier of the data type.\nThe offset of the array of <code>FDBColumnHeader</code>s\nReturns the expected byte length of the referenced …\nThe offset of the (null-terminated) name.\nThe number of entries in the array\nThe data type.\nReturns the expected byte length of the <code>FDBFieldData</code> array.\nThe fields in this row\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe offset of the row header.\nOffset of the first element of the linked list or …\nThe offset of the next list entry or <code>0</code>.\nThe offset of the table data header.\nThe offset of this table definition header.\nReturns the length in bytes of the TableHeader array.\nThe offset of the (null-terminated) name of this table\nThe <code>FDBTableHeader</code> array.\nThe bytes that specify the value.\nLow-Level <code>std::io</code> reader for FDB files\nLow-level <code>std::io</code> writer\nErrors generated by the builder module\nExtension trait to <code>Seek + BufRead</code> for reading strings\nExtension trait for …\nExtension to <code>Seek + Read</code> to read an FDB file\nContains the error value\nImplementation of …\nFailed IO\nContains the success value\nResults for this module\nUnknown Value Type\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the table bucket header list\nGet the column header list\nReturns a vector of <code>FDBFieldData</code>\nRead the schema header\nGet a 64bit integer\nGet a row header\nReturns an iterator over <code>FDBRowHeader</code> offsets\nGet a row header list entry\nRead a string from the file\nGet the table data header\nRead the table def header\nRead the table header\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTry to load a field value\nA trait to write assembly data to file\nWrite <code>self</code> as little-endian bytes to <code>IO</code>\nA 64 bit integer\nA boolean\nReference to a single bucket\nReference to a column definition\nA complete in-memory read-only database\nValue of or reference to a field value\nA 32 bit IEEE floating point number\nReference to the tables array\nA 32 bit integer\nThe context for <code>mem::Field</code>\nMap MemContext values to OwnedContext values\nThe NULL value\nReference to a single row\nReference to a single table\nReference to the tables array\nA string\nA (XML?) string\nGet the bucket at the index\nGet the amount of buckets\nGet the bucket for the given hash\nGet a list of all rows in the bucket of a given index\nGet the bucket iterator\nGet a table by its name\nGet the column at the index\nThe amount of columns in this table\nGet the column iterator\nGet the field at the index\nGet the count of fields\nGet the iterator over all fields\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the table reference at the specified index\nGet a reference to the header\nGet a list of rows by index\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the tables array is empty\nCheck whether the bucket is empty\nIterator types\nGet an interator over all tables\nReturns the length of the tables array\nReturns the name of a column\nGet the name of the table\nReturns the name of a column\nGet the undecoded name of the table\nCreate a new database reference\nGet an iterator over all rows\nReturns an iterator over all rows in this bucket\nReturns a reference to the tables array\nReturns the default value type of the column\nIterator produced by <code>Table::bucket_iter</code>\nAn iterator over fields in a row\nStruct that implements <code>Bucket::row_iter</code>.\nIterator created by <code>Tables::iter</code>\nIterator produced by <code>Table::row_iter</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new row iter from a bucket iter\nCreate a new bucket iter\nCreate a new instance of this iterator\nKey Error\nErrors when creating filters at runtime\nA struct that can act as a PK filter\nUnsupported Type {0:?}\nCreate an integer PK hash\nCreate a bigint PK filter\nCheck <code>other</code> against the filter\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the contained hash\nCreate an integer PK hash\nCreate an integer PK filter\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the value used for exact comparison\nCreate a PK filter from a string\nCreate a text PK hash\nCreate a text PK filter\nAn owned, atomically-reference counted handle to a database\nBase type for a handle to an in-memory data structure\nError type\nThe basic handle into a byte buffer\nA handle that contains a reference\nA handle that contains a slice\nA handle that contains a slice iterator\nTry from a handle\nGet the byte slice for the whole database\nBorrow the atomically-reference counted handle as a byte …\nBorrow the atomically-reference counted handle as a byte …\nGet the number of buckets\nGet the number of buckets\nGet the slice of buckets\nGet the slice of buckets\nReturns a copy of the contained buffer\nReturns a copy of the contained buffer\nGeneral methods for aligned access to a byte buffer\nGet the number of columns\nGet the number of columns\nGet the type of the column\nGet the type of the column\nGet the column header list\nGet the column header list\nGet the name of the column\nGet the name of the column\nGet the number of fields\nGet the number of fields\nGet the slice of fields\nGet the slice of fields\nGet the first row header entry or <code>None</code>\nGet the first row header entry or <code>None</code>\nReturns the argument unchanged.\nGet the reference at <code>index</code>\nGet the reference at <code>index</code>\nGet the bucket for a particular id / hash\nThe low-level Handle API\nCalls <code>U::from(self)</code>.\nGet the tables\nGet the tables\nGet the raw value out of the handle\nGet the raw value out of the handle\nGet the tables\nGet the tables\nGet the tables\nMap something with a closure\nMap something with a closure\nExtract a value from a reference\nExtract a value from a reference\nGet the tables\nMap the value with a closure\nMap the value with a closure\nCreates a new handle\nCreate a new atomically-reference counted handle\nCreate a new atomically-reference counted handle\nCreate a new database handle\nReturns a copy of the contained buffer\nGet the next row header list entry instance\nGet the next row header list entry instance\nGet a reference to the raw value inside\nGet a reference to the raw value inside\nReplace the value that is stored with the memory pointer\nGet the associated row header.\nGet the associated row header.\nGet an iterator over all buckets\nGet an iterator over all buckets\nHandling of slice references into the in-memory DB file\nGet the number of tables\nGet the number of tables\nGet the table data header\nGet the table data header\nGet the table definition header\nGet the table definition header\nGet the table header slice\nGet the table header slice\nGet the name of the table\nGet the name of the table\nGet the header for the local database\nTurns a handle of an option into an option of a handle\nConversion function\nGet the value from this handle\nGet the value from this handle\nMap something with a closure\nMap something with a closure\nError for handling a buffer\nAdditional methods on <code>&amp;[u8]</code>\nContains the error value\nContains the success value\nindex out of bounds {0:?}\nResult with a <code>BufferError</code>\nindex not aligned {0}\nCompares the name given by <code>bytes</code> with the one referenced …\nReturns the argument unchanged.\nGet a reference to a type at the given address of this …\nGet a subslice a the given offset of the given length\nGet a reference to a slice at the given address of this …\nGet the header of the file.\nGet the database header\nGet i64\nCalls <code>U::from(self)</code>.\nGet the <code>FDBRowHeader</code> at the given addr.\nGet the <code>FDBRowHeader</code> list entry at the given addr.\nGet a buffer as a latin1 string\nGet the table data header\nGet the table data header at the given addr.\nGet the table data reference\nGet the table definition header at the given addr.\nGet the table definition header\nGet the table definition reference\nGet the table slice\nThe basic error type\nThe different kinds of <code>BaseError</code>s\nThe base result type\nFailed to read from the buffer\nThe basic database handle\nContains the error value\nContains the error value\nA newtype for a row header reference\nContains the success value\nContains the success value\nCustom result type for this module\nUnimplemented\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new database handle\nGet the header for the local database\nCreates a new error of kind <code>BaseErrorKind::Unimplemented</code>\nInvariant: length must always be a multiple of 4 bytes\nInvariant: length must always be a multiple of 8 bytes\nInvariant: length must always be a multiple of 4 bytes\nInvariant: length must always be a multiple of 8 bytes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the slice is empty\nGet the len of this slice\nA connection to a SQLite database.\nContains the error value\nEnum listing possible errors from rusqlite.\nError returned when an <code>execute</code> call returns rows.\nError when the value of a particular column is requested, …\nError when SQLite gives us an integral value outside the …\nError when the value of a particular column is requested, …\nError when the value of a named column is requested, but …\nError when the value of a particular column is requested, …\nError returned by <code>vtab::Values::get</code> when the filter …\nError when the number of bound parameters does not match …\nError when using SQL named parameters and passing a …\nError converting a file path to a string.\nError when the SQL is not a <code>SELECT</code>, is not read-only.\nAn error case available for implementors of custom modules …\nError when the SQL contains multiple statements.\nError converting a string to a C-compatible string because …\nContains the success value\nError when a query that was expected to return at least …\nA typedef of the result returned by many methods.\nAn error from an underlying SQLite call.\nError reported when attempting to open a connection when …\nError when a query that was expected to insert one row did …\nError available for the implementors of the <code>ToSql</code> trait.\nError converting a string to UTF-8.\nRegister a callback to handle <code>SQLITE_BUSY</code> errors.\nSet a busy handler that sleeps for a specified amount of …\nFlush caches to disk mid-transaction\nClose the SQLite connection.\nRegister a virtual table implementation.\nReturns the current value of a <code>config</code>.\nConvenience method to prepare and execute a single SQL …\nConvenience method to run multiple SQL statements (that …\nConvenience method to prepare and execute a single SQL …\nRemove/finalize all prepared statements currently in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Connection</code> from a raw handle.\nGet access to a handle that can be used to interrupt long …\nGet access to the underlying SQLite database connection …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTest for auto-commit mode. Autocommit mode is on by …\nDetermine if all associated prepared statements have been …\nGet the SQLite rowid of the most recent successful INSERT.\nRegister the module\nOpen a new connection to a SQLite database.\nOpen a new connection to an in-memory SQLite database.\nOpen a new connection to an in-memory SQLite database.\nOpen a new connection to an in-memory SQLite database …\nOpen a new connection to a SQLite database.\nOpen a new connection to a SQLite database using the …\nReturns the path to the database file, if one exists and …\nQuery the current value(s) of <code>pragma_name</code> associated to …\nQuery the current rows/values of <code>pragma_name</code>.\nQuery the current value of <code>pragma_name</code>.\nSet a new value to <code>pragma_name</code>.\nSet a new value to <code>pragma_name</code> and return the updated …\nPrepare a SQL statement for execution.\nPrepare a SQL statement for execution, returning a …\nConvenience method to execute a query that is expected to …\nConvenience method to execute a query that is expected to …\nConvenience method to execute a query with named …\nBegin a new savepoint with the default behavior (DEFERRED).\nBegin a new savepoint with a specified name.\nMake configuration changes to a database connection\nSet the maximum number of cached prepared statements this …\nBegin a new transaction with the default behavior …\nBegin a new transaction with a specified behavior.\nTry to export a database to a SQL connection\nBegin a new transaction with the default behavior …\nA single column\nThe whole database\nA single table\nGet all columns\nComputes the size of the serialized database\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new database\nCreates a new table\nAdd a column to this table\nPush a row into this table\nPush a table to the database\nGet the data type of this column\nWrite the database to an output stream\nA 64 bit integer\nA 64 bit integer\nA boolean\nA boolean\nType-Parameters to <code>Value</code>\nA 32 bit IEEE floating point number\nA 32-bit IEEE floating point number\nThe type that holds a <code>ValueType::BigInt</code>\nA 32 bit integer\nA 32-bit signed integer\nThe NULL value\nThe NULL value\nThe type that holds a <code>ValueType::String</code>\nA string\nA long string\nThis represents a value type that could not be parsed\nA single field value in the database\nTrait for mapping value from one context to another\nValue datatypes used in the database\nA (XML?) string\nAn (XML?) string\nThe type that holds a <code>ValueType::VarChar</code>\nValues as serialized to a file\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTake an SQLite column declaration type and guess the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>Some</code> with the value if the field contains a …\nReturns <code>Some</code> with the value if the field contains a …\nReturns <code>Some</code> with the value if the field contains a …\nReturns <code>Some</code> with the value if the field contains an …\nReturns <code>Some</code> with the value if the field contains a …\nReturns <code>Some</code> with the value if the field contains a …\nCreates a value of a different context using the given …\nCalled when mapping an i64\nCalled when mapping a string\nCalled when mapping an XML value\nValues as stored in byte slices\nValue as stored in owned allocation\nGet a static name for the type\nGet the canonical SQLite name of this data type\nGet the value that could not be interpreted\nA 64 bit integer\nA boolean\nA database field value repr\nThe <code>common::Context</code> for used to make <code>file::FDBFieldValue</code>\nA 32 bit IEEE floating point number\nAn indirect value in the file\nA 32 bit integer\nThe NULL value\nA string\nA (XML?) string\nThe base of the value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA 64 bit integer\nA boolean\nValue of or reference to a field value\nA 32 bit IEEE floating point number\nA 32 bit integer\nThe context for <code>mem::Field</code>\nThe NULL value\nA string\nA (XML?) string\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA 64 bit integer\nA boolean\nAn owned field value\nA 32 bit IEEE floating point number\nA 32 bit integer\nThe NULL value\nThe <code>Value</code> context for <code>core::Field</code>\nA string\nA (XML?) string\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")