searchState.loadedDescShard("assembly_fdb_core", 0, "fdb-core\nThis trait is implemented on all types that represent a …\nThe structures, as they are serialized\nGet the hash value\nTypes that are common to most FDB-APIs\nThe basic format of an array reference\nThe header of a single bucket.\nThe header of a column (field-of-row) definition\nThe type and value of a row field.\nThe header of the database file.\nThe header for a single row\nOne entry of the linked list of references to rows.\nThe header of a table data block\nThe header of a table definition\nThe header of a table.\nThe offset of the start of the array\nReturns the expected byte length of the <code>FDBBucketHeader</code> …\nThe buckets.\nThe number of columns in this table.\nThe numeric identifier of the data type.\nThe offset of the array of <code>FDBColumnHeader</code>s\nReturns the expected byte length of the referenced …\nThe offset of the (null-terminated) name.\nThe number of entries in the array\nThe data type.\nReturns the expected byte length of the <code>FDBFieldData</code> array.\nThe fields in this row\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe offset of the row header.\nOffset of the first element of the linked list or …\nThe offset of the next list entry or <code>0</code>.\nThe offset of the table data header.\nThe offset of this table definition header.\nReturns the length in bytes of the TableHeader array.\nThe offset of the (null-terminated) name of this table\nThe <code>FDBTableHeader</code> array.\nThe bytes that specify the value.\nA 64 bit integer\nA 64 bit integer\nA boolean\nA boolean\nType-Parameters to <code>Value</code>\nA 32 bit IEEE floating point number\nA 32-bit IEEE floating point number\nThe type that holds a <code>ValueType::BigInt</code>\nA 32 bit integer\nA 32-bit signed integer\nThe NULL value\nThe NULL value\nThe type that holds a <code>ValueType::String</code>\nA string\nA long string\nThis represents a value type that could not be parsed\nA single field value in the database\nTrait for mapping value from one context to another\nValue datatypes used in the database\nA (XML?) string\nAn (XML?) string\nThe type that holds a <code>ValueType::VarChar</code>\nValues as serialized to a file\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTake an SQLite column declaration type and guess the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>Some</code> with the value if the field contains a …\nReturns <code>Some</code> with the value if the field contains a …\nReturns <code>Some</code> with the value if the field contains a …\nReturns <code>Some</code> with the value if the field contains an …\nReturns <code>Some</code> with the value if the field contains a …\nReturns <code>Some</code> with the value if the field contains a …\nCreates a value of a different context using the given …\nCalled when mapping an i64\nCalled when mapping a string\nCalled when mapping an XML value\nValues as stored in byte slices\nValue as stored in owned allocation\nGet a static name for the type\nGet the canonical SQLite name of this data type\nGet the value that could not be interpreted\nA 64 bit integer\nA boolean\nA database field value repr\nThe <code>common::Context</code> for used to make <code>file::FDBFieldValue</code>\nA 32 bit IEEE floating point number\nAn indirect value in the file\nA 32 bit integer\nThe NULL value\nA string\nA (XML?) string\nThe base of the value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA 64 bit integer\nA boolean\nValue of or reference to a field value\nA 32 bit IEEE floating point number\nA 32 bit integer\nThe context for <code>mem::Field</code>\nThe NULL value\nA string\nA (XML?) string\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA 64 bit integer\nA boolean\nAn owned field value\nA 32 bit IEEE floating point number\nA 32 bit integer\nThe NULL value\nThe <code>Value</code> context for <code>core::Field</code>\nA string\nA (XML?) string\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")