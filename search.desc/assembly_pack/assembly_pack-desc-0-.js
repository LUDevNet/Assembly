searchState.loadedDescShard("assembly_pack", 0, "Datastructures for working with the game packaging\nCommon elements\nCRC digest of resource paths\n<code>md5</code> hashsum of files\nThe pack (<code>*.pk</code>) files\nThe pack index (<code>*.pki</code>) files\nThe segmented (<code>*.sd0</code>) compression format\nText File Formats\nThe type of data to return on a premature break\nDatastructure to hold a CRC tree.\nSimple visitor that collects a CRC tree to an instance of […\nNode in a CRC tree\nA trait to visit a CRC tree from a reader\nMetadata for a single file\nMetadata for a file, raw and compressed\nThe compressed metadata\nThe CRC value of this file\nThe data in this node\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTools to handle a file system\nmd5sum of the file\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the contained map\nBinary tree node to the left\nCreate a new collector\nCreate a new File-Meta pair\nNom parsers\nThe raw metadata\nBinary tree node to the right\nSize of the file\nGet the (relative) patcher URL for this file\nCalled once for every\nWriter for CRC trees\nInformation on a file\nA trait to scan a directory of files\nCalled when read-dir fails\nCalled when read-dir fails\nReturn the metadata for this file\nReturn just the filename\nReturn the full “local” path\nReturn the “real” path\nScan a directory and call FsVisitor::visit_file for all …\nCalled when a file is visited\nParse a CRC node\nParse a string after an u32 length specifier\nWrite a CRC tree to a writer\nHash-Value for a relative path\nCalculate the Cyclic-Redundancy-Check for a file path\nReturns the argument unchanged.\nCreate a new CRC value from a sequence of bytes\nCreate a new CRC value from a raw 32-bit integer\nCalls <code>U::from(self)</code>.\nGet the raw CRC value\nFailure to parse an MD5 hash\nByte is not in <code>0-9a-fA-F</code>\nNot 32 hex bytes\nMD5 hashsum of a file\nCompute an MD5 Sum\nReturns the argument unchanged.\nReturns the argument unchanged.\nRead an MD5 sum from bytes\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMD5 hash on <code>Read</code>/<code>Write</code>\nGet the md5sum of a file\n<code>serde</code> helper for binary formats\nvalue of the failing byte\nIndex of the failing byte\nWrapper for <code>std::io</code> traits.\nGet the byte count\nGet the MD5 digest\nReturns the argument unchanged.\nCreate a mutable reference to the inner reader\nCalls <code>U::from(self)</code>.\nCreate a mutable reference to the inner reader\nCreate a new Instance\nDeserialize with 4 trailing NULL bytes if not human …\nSerialize with 4 trailing NULL bytes if not human readable\nThe structures as the appear in the file\nInteract with PK files in the file system\nParsing functions\nLow level reader for PK files\nWrite PK files\nMagic bytes after files in a PK file\nMagic bytes at the start of a PK file\nAn entry for a single file\nPayload of the <code>PKEntry</code>\nThe header of a pack file#\nThe CRC value of this file\nThe data in this node\nOffset of the file data within the PK archive\nThe base addr of the file list\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTODO: figure out\nBinary tree node to the left\nFile Metadata\nNumber of compressed files in this archive\nBinary tree node to the right\nHandle to a PK file\nInversion of control to put bytes into PK\nFinish the file by writing the directory\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOpen a PK file\nPut a file into the PK\nWrite the bytes into the file\nParse a file list entry\nParse a file list entry\nParse the file list\nParse the magic bytes\nParse the trailer\nThe stream <em>is</em> sd0 compressed\nA stream that is either compressed or plain\nA low level random access to the entries\nA low level pack file reader\nA low level read for a file\nFailure when parsing\nThe stream is <em>not</em> sd0 compressed\nCheck for the magic bytes at the beginning of the file\nFind an entry given a CRC\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the number of entries\nLoad the header from the end of the file\nGet the specified entry if inside of count\nGet an random access wrapper for the entries\nGet a list of all entries\nGet some object with a read trait representing the data\nGet a boxed reader for the file stream\nLoad the header from the end of the file\nGet a mutable reference to the inner reader\nGet a mutable reference to the underlying file\nGet a reference to the inner reader\nGet a reference to the underlying file\nGet the root entrys if not empty\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the inner reader\nReturn the contained PackFile\nOpen a file from a stream\nGet all the entries\nImplements a visitor pattern\nWrite the full directory to disk\nWrite the directory of a PK file.\nWrite the trailer of a PK file\nPublic data structures for pack index files\nGenerating PKI files\nLogic to read a PKI file from a byte stream\nParsers for parts of the file\nCode to write out a PKI file\nThe data associated with each file\nThe data for a single pack file\nThe entire data in a PKI file\nHandle to a specific pack file\nadd one file to this pack file\nadd more files to this pack file\nAdd a new pack to this PKI\nThe list of PK archive paths\nThe category of this file. The least significant byte …\nThe map from CRC to file metadata\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad the PKI from a BufRead implementation\nLoad the PKI from a file\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe index of the pack file in <code>PackIndexFile::archives</code>\nThe path to the pack file relative to the installation\nWhether to include or exclude the specific files\nKind of an argument\nConfig for creating a pack file\nThe name represents a directory\nExclude matching files\nThe name represents a file\nInclude matching files\nArgument to a pack file\nConfig for a single pack file\nwhat files to include\nWhether to compress files\nThe directory to pull from\nInclude or Exclude\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe kind of the argument\nThe manifest file (e.g. trunk.txt)\nname of the file\nThe name\nThe file to output the PKI to\nThe list of pack files\nPrefix\nRun the given config\nA filter for the specific file name\nWhether to recurse into subdirectories\nFailed to open the file\nEOF while parsing\nFailed to load a PKI file\nFile did not match parser\nValid file but invalid data\nFailed to read from the file\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParse a complete PKI file from an in-memory buffer\nWrite out a PKI file\nWhen compressing data, the compression level can be …\nThe magic bytes for the sd0 format\nOptimize for the size of data being encoded.\nDecode a byte slice into a vector\nEncode a byte slice into a vector\nOptimize for the best speed of encoding.\nReturns the argument unchanged.\nCompression for use in a script\nSegmented Index Files (si0)\nCalls <code>U::from(self)</code>.\nReturns an integer representing the compression level, …\nCreates a new description of the compression level with an …\nNo compression is to be performed, this may actually …\nstd::io::Read adapters for <code>*.sd0</code> reading\nstd::io::Write adapters for <code>*.sd0</code> writing\nWhen compressing data, the compression level can be …\nSD0 Converter\nConvert a file to sd0\nReturns the argument unchanged.\nWhether to generate ‘si0’ files\nCalls <code>U::from(self)</code>.\nThe first line is a header of the following form:\nThe rest of the file is one line for every compressed …\nAdler32 of the raw bytes modulo 0xFFFFFFFF, as hex, with …\nMD5 hash of compressed bytes\nnumber of compressed bytes\nnumber of bytes already written to compressed file …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nthe file extension <code>si0</code> and magic bytes 0x01, 0xff as …\nthe MD5 hash of the input\nMD5 hash of the raw bytes\nthe total size of the input\nthe segment size\nsize of the block\nstart of the block in the raw file\ncalled io::Read::read again after an error\nContains the error value\nError type for segmented streams\nAn IO Error occured\nThe magic bytes are wrong\nContains the success value\nResult with segmented error\nA <code>sd0</code> streamed file\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner stream\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the inner reader\nCreate a new reader\nRead from the (decompressed) stream\nWhen compressing data, the compression level can be …\nContains the error value\nAn Error\nCalled finish on invalid\nI/O Error\nContains the success value\nA result\nA <code>sd0</code> encoder\nFinish the current block and return the inner writer\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new encoder\nPKI-File Generator\nThe manifest (<code>*.txt</code>) files\nInclude a directory\nAdd a file\nA single command\nChange the current directory\nSpecification on which directory to include/exclude\nComplete the pack file\nSet the name of the manifest file\nInitialize a new pack file\nSet the name of the pack index file\nExclude a directory\nRemove a file\nRelative path to the directory\nOptional glob / filter\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse a single line of text as a command\nPush a command to the config struct\nWhether to recurse subdirectories\nSpecify the filename\nThe name of that file\nThe name of that file\nActivate compression for this package\nContains the error value\nAn error from parsing a manifest\nExpected a header but found something else\nLine in a manifest file\nThe <code>[files]</code> section\nAn IO error\nA manifest file in-memory\nUnexpected EOF, expected a header\nUnexpected EOF, expected version line\nFailed to parse a line\nContains the success value\nThe result type for this module\nA section of the manifest\nThe <code>[version]</code> section\nThe line in the <code>[version]</code> section\nThe parsed, sorted list of files\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRead a manifest from a BufRead implementation\nRead a Manifest from a file\nThe hash of <code>version</code> as a string\nHash the version number\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad the manifest from a stream of lines\nThe name of this manifest\nCreate a new version line\nCheck whether the version and it’s hash match\nThe version of this manifest\nThe parsed version line")